{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","e","preventDefault","newText","toUpperCase","showAlert","toLowerCase","split","length","About","myStyle","setmyStyle","btnText","setBtnText","Alert","alert","role","msg","App","setmode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.12402f74.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">About Us</Link>\r\n        </li>\r\n      \r\n      </ul>\r\n      <form className=\"d-flex\">\r\n      <div className=\"form-check form-switch\">\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`} htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n</div>\r\n        {/* <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/> */}\r\n        {/* <button className=\"btn btn-outline-success\" type=\"submit\">Search</button> */}\r\n      </form>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    \r\n    const handleUpClick=(e)=>{\r\n        e.preventDefault();\r\n        console.log(\"uppercase was clicked\");\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\",\"success\");\r\n    }\r\n    const handleLoClick=(e)=>{\r\n        e.preventDefault();\r\n        console.log(\"lowercase was clicked\");\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase\",\"success\");\r\n    }\r\n    const handleOnChange=(event)=>{\r\n        console.log(\"handleOnChange\");\r\n        setText(event.target.value);}\r\n        const [text, setText] = useState('Enter text here');\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode==='light'?'#042743':'white'}}>\r\n            <h2>{props.heading}</h2>\r\n            <form>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='light'?'white':'grey',color:props.mode==='light'?'#042743':'white'}}rows=\"8\"></textarea>\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button type=\"submit\" className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            </form>\r\n        </div>\r\n        <div className=\"container my-2\" style={{color:props.mode==='light'?'#042743':'white'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} chracters</p>\r\n            <h2>Preview</h2>\r\n            <p>{text}</p>\r\n        </div>\r\n        \r\n\r\n        </>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle,setmyStyle]=useState(\r\n        {color: 'white',\r\n        backgroundColor:'black'}\r\n    \r\n    )\r\n    const [btnText,setBtnText]=useState(\"Enable Dark Mode\");\r\n    const toggleStyle=()=>{\r\n        if(myStyle.color==='white'){\r\n            setmyStyle({\r\n                color: 'black',\r\n        backgroundColor:'white' }\r\n   )\r\n   setBtnText(\"Enable Dark Mode\");\r\n}else{\r\n        setmyStyle(\r\n            {color: 'white',\r\n    backgroundColor:'black'\r\n        })\r\n        setBtnText(\"Enable Light Mode\");\r\n   }\r\n}\r\n    return (\r\n        <div>\r\n            <div className=\"container my-3\" style={myStyle}>\r\n                <h1>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> \r\n        <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary my-3\">{btnText}</button>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n\r\n       props.alert && <div>\r\n             <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.type}</strong>:{props.alert.msg} \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode,setmode]=useState('light');\n  const [alert,setAlert]=useState(null);\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type,\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },1500);\n  }\n  const toggleMode=()=>{\n    if(mode==='light'){\n      setmode('dark');\n      document.body.style.backgroundColor=\"#042743\";\n      showAlert(\"Dark mode has been enabled\",\"success\");\n    }else{\n      setmode('light');\n      document.body.style.backgroundColor=\"white\";\n      showAlert(\"Light mode has been enabled\",\"success\");\n    }\n    \n  }\n  return (\n    <>\n    <Router>\n      <Navbar title=\"TextsUtils2\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}></Alert>\n      <div className=\"container my-3\">\n      <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n          <TextForm showAlert={showAlert} heading=\"Welcome to TextUtils\" mode={mode}/>\n          </Route>\n        </Switch>       \n      </div>\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}